apiVersion: v1
kind: ServiceAccount
metadata:
  name: devworkspace-backup-controller
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: devworkspace-backup-controller
rules:
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
      - delete
      - deletecollection
      - patch
      - update
  - apiGroups:
      - ''
    resources:
      - pods
    verbs:
      - create
      - delete
      - deletecollection
      - patch
      - update
  - apiGroups:
      - ''
      - template.openshift.io
    resources:
      - processedtemplates
      - templateconfigs
      - templateinstances
      - templates
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - workspace.devfile.io
    resources:
      - devworkspaces
    verbs:
      - get
      - list
  - apiGroups:
      - ''
    resources:
      -  namespaces
    verbs:
      - get
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: devworkspace-backup-controller
subjects:
  - kind: ServiceAccount
    name: devworkspace-backup-controller
    namespace: devspaces
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: devworkspace-backup-controller
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: devworkspace-backup
data:
  devworkspace-backup: |
    #!/usr/bin/env bash
    set -x
    set -e
    current_time=$(date +%s)
    for namespace in $(oc get namespaces -l app.kubernetes.io/component=workspaces-namespace  -o go-template='{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' )
    do
      for workspace in $(oc get devworkspaces -n ${namespace} -o go-template='{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
      do
        last_start=$(date -d$(oc get devworkspace ${workspace} -n ${namespace} -o go-template='{{range .status.conditions}}{{if eq .type "Started"}}{{.lastTransitionTime}}{{end}}{{end}}') +%s)
        workspace_age=$(( ${current_time} - ${last_start} ))
        if [[ ${workspace_age} -lt  ${LAST_START} ]]
        then
          workspace_status=$(oc get devworkspace ${workspace} -n ${namespace} -o go-template='{{.status.phase}}')
          if [[ "${workspace_status}" == "Stopped" ]]
          then
            echo "Backing Up Workspace: ${workspace} in ${namespace}"
            workspace_pvc="storage-$(oc get devworkspace ${workspace} -n ${namespace} -o go-template='{{.status.devworkspaceId}}')"  
            oc process workspace-backup -p DEVWORKSPACE_NAME=${workspace} -p DEVWORKSPACE_NAMESPACE=${namespace} -p DEVWORKSPACE_PVC=${workspace_pvc} | oc apply -n ${namespace} -f -
          fi
        fi
      done
    done
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: "Create Backup of Dev Spaces Workspace PVC"
    openshift.io/display-name: "Create Backup of Dev Spaces Workspace PVC"
    template.openshift.io/bindable: "false"
    version: "1.0"
  name: workspace-backup
objects:
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: ${DEVWORKSPACE_NAME}-${DEVWORKSPACE_NAMESPACE}-backup
  spec:
    ttlSecondsAfterFinished: 120
    selector: {}
    template:
      metadata:
        name: ${DEVWORKSPACE_NAME}-${DEVWORKSPACE_NAMESPACE}-backup
        annotations:
          io.kubernetes.cri-o.Devices: "/dev/fuse,/dev/net/tun"
      spec:
        hostUsers: false
        serviceAccount: devworkspace-backup-serviceaccount
        containers:
          - name: workspace-backup
            # image: nexus.clg.lab:5002/dev-spaces/workspace-backup:latest
            image: quay.io/cgruver0/che/workspace-backup:latest
            args:
            - '/workspace-recovery.sh'
            - '--backup'
            resources:
              limits:
                cpu: '1'
                memory: 6Gi
              requests:
                cpu: 100m
                memory: 1Gi
            securityContext:
              capabilities:
                add:
                  - SETGID
                  - SETUID
                drop:
                  - ALL
              runAsUser: 1000
              runAsNonRoot: true
              readOnlyRootFilesystem: false
              allowPrivilegeEscalation: true
              procMount: Unmasked
            env:
            - name: DEVWORKSPACE_NAME
              value: ${DEVWORKSPACE_NAME}
            - name: DEVWORKSPACE_NAMESPACE
              value: ${DEVWORKSPACE_NAMESPACE}
            - name: DEVWORKSPACE_BACKUP_REGISTRY
              value: ${DEVWORKSPACE_BACKUP_REGISTRY}
            - name: REGISTRY_AUTH_FILE
              value: /tmp/registry/auth.json
            volumeMounts:
            - mountPath: /workspace-pvc
              name: workspace-pvc
            - name: ca-certs-merged
              readOnly: true
              mountPath: /etc/pki/ca-trust/extracted/pem
            - name: pull-secret
              readOnly: true
              mountPath: /tmp/registry
        restartPolicy: Never
        volumes:
          - name: workspace-pvc
            persistentVolumeClaim:
              claimName: ${DEVWORKSPACE_PVC}
          - name: ca-certs-merged
            configMap:
              name: ca-certs-merged
              defaultMode: 0644
          - name: pull-secret
            secret:
              secretName: devworkspace-container-registry-dockercfg
              items:
              - key: .dockerconfigjson
                path: auth.json
parameters:
  -
    description: "Name of the DevWorkspace"
    displayName: "DevWorkspace Name"
    name: DEVWORKSPACE_NAME
    required: true
  -
    description: "Name of the DevWorkspace Namespace"
    displayName: "Namespace Name"
    name: DEVWORKSPACE_NAMESPACE
    required: true
  -
    description: "PVC for the DevWorkspace"
    displayName: "DevWorkspace PVC"
    name: DEVWORKSPACE_PVC
    required: true
  -
    description: "Target Registry for Backup Image"
    displayName: "Backup Registry Name"
    name: DEVWORKSPACE_BACKUP_REGISTRY
    required: true
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: devworkspace-backup-controller
spec:
  schedule: "0 * * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          volumes: 
          - name: script
            configMap:
              name: devworkspace-backup
              defaultMode: 0555
              items:
              - key: devworkspace-backup
                path: devworkspace-backup.sh
          restartPolicy: OnFailure
          serviceAccount: devworkspace-controller-serviceaccount
          containers:
          - name: openshift-cli
            image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
            env:
            - name: LAST_START
              # One Hour
              value: "3600"
            - name: DEVWORKSPACE_BACKUP_REGISTRY
              value: your-registry.org:5000/target/for/backups
            command:
            - /script/devworkspace-backup.sh
            resources:
              requests:
                cpu: 100m
                memory: 64Mi
              limits:
                cpu: 100m
                memory: 64Mi
            volumeMounts:
            - mountPath: /script
              name: script
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: devworkspace-backup-service-account-config
  labels:
    app.kubernetes.io/part-of: che.eclipse.org
    app.kubernetes.io/component: workspaces-config
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: devworkspace-backup-serviceaccount
  secrets:
  - name: devworkspace-container-registry-dockercfg
  imagePullSecrets:
  - name: devworkspace-container-registry-dockercfg
- kind: Role
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: devworkspace-backup-use-nested-podman-scc
  rules:
    - verbs:
        - use
      apiGroups:
        - security.openshift.io
      resources:
        - securitycontextconstraints
      resourceNames:
        - nested-podman-scc
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: devworkspace-backup-use-nested-podman-scc
  subjects:
    - kind: ServiceAccount
      name: devworkspace-backup-serviceaccount
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: devworkspace-backup-use-nested-podman-scc